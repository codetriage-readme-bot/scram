<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>event.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">event.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="event_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Contains event classes for fault trees.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;initializer_list&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;optional&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;variant&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">expression.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/// Abstract base class for general fault tree events.</span></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Event.xhtml">   39</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Event.xhtml">Event</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Id.xhtml#aae8674c47f234e5d98dfcfa1b6cf69c1">Id::Id</a>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="classscram_1_1mef_1_1Event.xhtml#a966f53c51a08bdde26c131c7b8474b7f">~Event</a>() = 0;  <span class="comment">///&lt; Abstract class.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// Representation of a house event in a fault tree.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/// @note House Events with unset/uninitialized expressions default to False.</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1HouseEvent.xhtml">   49</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Event.xhtml">Event</a> {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">   51</a></span>&#160;  <span class="keyword">static</span> <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a> <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">kTrue</a>;  <span class="comment">///&lt; Literal True event.</span></div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">   52</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a> <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">kFalse</a>;  <span class="comment">///&lt; Literal False event.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <span class="keyword">using</span> Event::Event;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a>(<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a>&amp;&amp;);  <span class="comment">///&lt; For the (N)RVO only (undefined!).</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">  /// Sets the state for House event.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">  /// @param[in] constant  False or True for the state of this house event.</span></div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1HouseEvent.xhtml#a15ab4daf36b62127703cf610bdc80183">   61</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a15ab4daf36b62127703cf610bdc80183">state</a>(<span class="keywordtype">bool</span> constant) { state_ = constant; }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">  /// @returns The true or false state of this house event.</span></div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1HouseEvent.xhtml#a4f4a16265e26205981d67d25d16f21d6">   64</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a4f4a16265e26205981d67d25d16f21d6">state</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> state_; }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">  /// Represents the state of the house event.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">  /// Implies On or Off for True or False values of the probability.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> state_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;};</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">/// Representation of a basic event in a fault tree.</span></div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BasicEvent.xhtml">   75</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Event.xhtml">Event</a> {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keyword">using</span> Event::Event;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  /// @returns true if the probability expression is set.</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BasicEvent.xhtml#ab6b4e5fd2ce8a81ae887902be30c2b29">   82</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#ab6b4e5fd2ce8a81ae887902be30c2b29">HasExpression</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> expression_ != <span class="keyword">nullptr</span>; }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  /// Sets the expression of this basic event.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">  /// @param[in] expression  The expression to describe this event.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  ///                        nullptr to remove unset the expression.</span></div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BasicEvent.xhtml#ab9764640b00bcc3f7241c5bf185d8f2a">   88</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#ab9764640b00bcc3f7241c5bf185d8f2a">expression</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression) { expression_ = <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#ab9764640b00bcc3f7241c5bf185d8f2a">expression</a>; }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  /// @returns The previously set expression for analysis purposes.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  /// @pre The expression has been set.</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BasicEvent.xhtml#aa03b0431033c36f868ee9eae956bd873">   93</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#aa03b0431033c36f868ee9eae956bd873">expression</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    assert(expression_ &amp;&amp; <span class="stringliteral">&quot;The basic event&#39;s expression is not set.&quot;</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> *expression_;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">  /// @returns The mean probability of this basic event.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  /// @pre The expression has been set.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">  /// @note The user of this function should make sure</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">  ///       that the returned value is acceptable for calculations.</span></div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BasicEvent.xhtml#a91e64a6329fa4a535fd2cae3c5d4acf7">  104</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#a91e64a6329fa4a535fd2cae3c5d4acf7">p</a>() const noexcept {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    assert(expression_ &amp;&amp; <span class="stringliteral">&quot;The basic event&#39;s expression is not set.&quot;</span>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">return</span> expression_-&gt;value();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  /// Validates the probability expressions for the primary event.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  /// @pre The probability expression is set.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  /// @throws DomainError  The expression for the basic event is invalid.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Validate() <span class="keyword">const</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  /// Indicates if this basic event has been set to be in a CCF group.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">  /// @returns true if in a CCF group.</span></div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BasicEvent.xhtml#ae027e3ac6b3cf4839983dc2616ce0572">  119</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#ae027e3ac6b3cf4839983dc2616ce0572">HasCcf</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ccf_gate_ != <span class="keyword">nullptr</span>; }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">  /// @returns CCF group gate representing this basic event.</span></div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BasicEvent.xhtml#a75eb81f1f94d00ae9ccbcc6459e577a7">  122</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>&amp; <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#a75eb81f1f94d00ae9ccbcc6459e577a7">ccf_gate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    assert(ccf_gate_);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> *ccf_gate_;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  /// Sets the common cause failure group gate</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  /// that can represent this basic event</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">  /// in analysis with common cause information.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">  /// This information is expected to be provided by</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">  /// CCF group application.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">  /// @param[in] gate  CCF group gate.</span></div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BasicEvent.xhtml#a2e6fa7bd71621b27383fd095e291dcfd">  134</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#a2e6fa7bd71621b27383fd095e291dcfd">ccf_gate</a>(std::unique_ptr&lt;Gate&gt; gate) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    assert(!ccf_gate_);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    ccf_gate_ = std::move(gate);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  /// Expression that describes this basic event</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">  /// and provides numerical values for probability calculations.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression_ = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">  /// If this basic event is in a common cause group,</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// CCF gate can serve as a replacement for the basic event</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  /// for common cause analysis.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span>  std::unique_ptr&lt;Gate&gt; ccf_gate_;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;};</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">/// Convenience aliases for smart pointers @{</span></div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a10fa62aee4792a7c79e82ced70cb9a48">  151</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="event_8h.xhtml#a10fa62aee4792a7c79e82ced70cb9a48">EventPtr</a> = std::unique_ptr&lt;Event&gt;;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="event_8h.xhtml#af2bc060f951b2dcb63fb313d3800f9f3">  152</a></span>&#160;<span class="keyword">using</span> <a class="code" href="event_8h.xhtml#af2bc060f951b2dcb63fb313d3800f9f3">HouseEventPtr</a> = std::unique_ptr&lt;HouseEvent&gt;;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a77a3414d54d1ed73527bc929354d0508">  153</a></span>&#160;<span class="keyword">using</span> <a class="code" href="event_8h.xhtml#a77a3414d54d1ed73527bc929354d0508">BasicEventPtr</a> = std::unique_ptr&lt;BasicEvent&gt;;</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a87cdc93e494b5e957991657303a2e30b">  154</a></span>&#160;<span class="keyword">using</span> <a class="code" href="event_8h.xhtml#a87cdc93e494b5e957991657303a2e30b">GatePtr</a> = std::unique_ptr&lt;Gate&gt;;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>;  <span class="comment">// To describe a gate&#39;s formula.</span></div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">  158</a></span>&#160;<span class="keyword">using</span> <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> = std::unique_ptr&lt;Formula&gt;;  <span class="comment">///&lt; Non-shared gate formulas.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">/// A representation of a gate in a fault tree.</span></div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Gate.xhtml">  161</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Event.xhtml">Event</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a> {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keyword">using</span> Event::Event;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">  /// @returns true if the gate formula has been set.</span></div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Gate.xhtml#a9ad3e3e7a9af34ee371ef8d25e6bdeea">  166</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml#a9ad3e3e7a9af34ee371ef8d25e6bdeea">HasFormula</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> formula_ != <span class="keyword">nullptr</span>; }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">  /// @returns The formula of this gate.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">  /// @pre The gate has its formula initialized.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">  173</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; <a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    assert(formula_ &amp;&amp; <span class="stringliteral">&quot;Gate formula is not set.&quot;</span>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">return</span> *formula_;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  }</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Gate.xhtml#a2ae956d90c851c3e47c623f9915f7e39">  177</a></span>&#160;  <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; <a class="code" href="classscram_1_1mef_1_1Gate.xhtml#a2ae956d90c851c3e47c623f9915f7e39">formula</a>() {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp;<span class="keyword">&gt;</span>(std::as_const(*this).formula());</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">  /// Sets the formula of this gate.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">  /// @param[in] formula  The new Boolean formula of this gate.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">  /// @returns The old formula.</span></div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Gate.xhtml#a8799642be619b6d634f385bf6599ed89">  187</a></span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml#a8799642be619b6d634f385bf6599ed89">formula</a>(<a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> formula) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    assert(formula &amp;&amp; <span class="stringliteral">&quot;Cannot unset formula.&quot;</span>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    formula_.swap(formula);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> formula;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> formula_;  <span class="comment">///&lt; Boolean formula of this gate.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">/// Logical connectives for formulas.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">/// The ordering is the same as analysis connectives in the PDAG.</span></div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72a">  199</a></span>&#160;<span class="comment"></span><span class="keyword">enum</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72a">Connective</a> : std::uint8_t {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  kAnd = 0,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  kOr,</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa105c845b24300fba1a8019c8b67a8512">  202</a></span>&#160;  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa105c845b24300fba1a8019c8b67a8512">kAtleast</a>,  <span class="comment">///&lt; Combination, K/N, atleast, or Vote gate representation.</span></div><div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaa21649cb2e0bc2618074ae4b28968882">  203</a></span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaa21649cb2e0bc2618074ae4b28968882">kXor</a>,  <span class="comment">///&lt; Exclusive OR gate with two inputs only.</span></div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaabe07e269099a3d699ca88f86bab1cc1">  204</a></span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaabe07e269099a3d699ca88f86bab1cc1">kNot</a>,  <span class="comment">///&lt; Boolean negation.</span></div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa84dc77641f7e38d126a3cdde0c7ed687">  205</a></span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa84dc77641f7e38d126a3cdde0c7ed687">kNand</a>,  <span class="comment">///&lt; Not AND.</span></div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa28ae6864fb9d0133c1b092fa57833a16">  206</a></span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa28ae6864fb9d0133c1b092fa57833a16">kNor</a>,  <span class="comment">///&lt; Not OR.</span></div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aafe69fbd83def53b2925412796fbeebd8">  207</a></span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aafe69fbd83def53b2925412796fbeebd8">kNull</a>,  <span class="comment">///&lt; Single argument pass-through without logic.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <span class="comment">// Rarely used connectives specific to the MEF.</span></div><div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa3045c94576caafc0e66ba200a38754e3">  210</a></span>&#160;  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa3045c94576caafc0e66ba200a38754e3">kIff</a>,  <span class="comment">///&lt; Equality with two inputs only.</span></div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa608ded5201a2888fd2d214af4fc582d1">  211</a></span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa608ded5201a2888fd2d214af4fc582d1">kImply</a>,  <span class="comment">///&lt; Implication with two inputs only.</span></div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915">  212</a></span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915">kCardinality</a>  <span class="comment">///&lt; General quantifier of events.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">/// The number of connectives in the enum.</span></div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="event_8h.xhtml#aafcac049a08323d6a03dd663de6653a7">  216</a></span>&#160;<span class="comment"></span><span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="event_8h.xhtml#aafcac049a08323d6a03dd663de6653a7">kNumConnectives</a> = 11;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">/// String representations of the connectives.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">/// The ordering is the same as the Connective enum.</span></div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="event_8h.xhtml#a1effa4453264f58afa6b91ff3f2ff5fe">  220</a></span>&#160;<span class="comment"></span><span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a1effa4453264f58afa6b91ff3f2ff5fe">kConnectiveToString</a>[] = {<span class="stringliteral">&quot;and&quot;</span>, <span class="stringliteral">&quot;or&quot;</span>,    <span class="stringliteral">&quot;atleast&quot;</span>,    <span class="stringliteral">&quot;xor&quot;</span>,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                           <span class="stringliteral">&quot;not&quot;</span>, <span class="stringliteral">&quot;nand&quot;</span>,  <span class="stringliteral">&quot;nor&quot;</span>,        <span class="stringliteral">&quot;null&quot;</span>,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                           <span class="stringliteral">&quot;iff&quot;</span>, <span class="stringliteral">&quot;imply&quot;</span>, <span class="stringliteral">&quot;cardinality&quot;</span>};</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">/// Boolean formula with connectives and arguments.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">/// Formulas are not expected to be shared.</span></div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml">  226</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a> {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">  /// Argument events of a formula.</span></div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">  229</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> = std::variant&lt;Gate*, BasicEvent*, HouseEvent*&gt;;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">  /// Formula argument with a complement flag.</span></div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">  232</a></span>&#160;<span class="comment"></span>  <span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Arg</a> {</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#a2b684ca33f857d6554b0f037b50bb5f8">  233</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#a2b684ca33f857d6554b0f037b50bb5f8">complement</a>;  <span class="comment">///&lt; Negation of the argument event.</span></div><div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#ac8705ed69dad1a5da55236db55268618">  234</a></span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#ac8705ed69dad1a5da55236db55268618">event</a>;  <span class="comment">///&lt; The event in the formula.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"></span>  };</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">  /// The set of formula arguments.</span></div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">  238</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">ArgSet</a> {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;   <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">    /// Default constructor of an empty argument set.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">ArgSet</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">    /// Constructors from initializer lists and iterator ranges of args.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a11af51fec2f46e08cf005cd5e6013dec">  245</a></span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a11af51fec2f46e08cf005cd5e6013dec">ArgSet</a>(std::initializer_list&lt;Arg&gt; init_list)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        : <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">ArgSet</a>(init_list.<a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>(), init_list.<a class="code" href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>()) {}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a002eb5ab56488d42508bb7ed62012816">  248</a></span>&#160;    <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a002eb5ab56488d42508bb7ed62012816">ArgSet</a>(std::initializer_list&lt;ArgEvent&gt; init_list)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        : <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">ArgSet</a>(init_list.<a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>(), init_list.<a class="code" href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>()) {}</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a52df198b6ee636ae5f6c19fcdc33ee7c">  252</a></span>&#160;    <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a52df198b6ee636ae5f6c19fcdc33ee7c">ArgSet</a>(Iterator first1, Iterator last1) {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      <span class="keywordflow">for</span> (; first1 != last1; ++first1)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Add</a>(*first1);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">    /// Adds an event into the arguments set.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">    /// @param[in] event  An argument event.</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">    /// @param[in] complement  Indicate the negation of the argument event.</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">    /// @throws DuplicateArgumentError  The argument event is duplicate.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Add</a>(<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> event, <span class="keywordtype">bool</span> complement = <span class="keyword">false</span>);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">    /// Overload to add formula argument with a structure.</span></div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a85bff0fcd9b5965b8d3b5113e729ea2a">  267</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a85bff0fcd9b5965b8d3b5113e729ea2a">Add</a>(<a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Arg</a> arg) { <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a85bff0fcd9b5965b8d3b5113e729ea2a">Add</a>(arg.<a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#ac8705ed69dad1a5da55236db55268618">event</a>, arg.<a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#a2b684ca33f857d6554b0f037b50bb5f8">complement</a>); }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">    /// Removes an event from the formula.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">    /// @param[in] event  The argument event of this formula.</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">    /// @throws LogicError  The argument is not in the set.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> Remove(<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> event);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">    /// @returns The underlying container with the data.</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a9e35c2fdad19fe30bc9e1ba4ccc8ed93">  278</a></span>&#160;<span class="comment"></span>    <span class="keyword">const</span> std::vector&lt;Arg&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a9e35c2fdad19fe30bc9e1ba4ccc8ed93">data</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> args_; }</div><div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#ab0516b885446046951fbfa665978a1ff">  279</a></span>&#160;    std::vector&lt;Arg&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#ab0516b885446046951fbfa665978a1ff">data</a>() { <span class="keywordflow">return</span> args_; }<span class="comment"></span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">    /// @returns The number of arguments in the set.</span></div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">  283</a></span>&#160;<span class="comment"></span>    std::size_t <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> args_.size(); }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">    /// @return true if the set is empty.</span></div><div class="line"><a name="l00286"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a1e4a926eb0379fdb33ee354f65348418">  286</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a1e4a926eb0379fdb33ee354f65348418">empty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> args_.empty(); }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;   <span class="keyword">private</span>:</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    std::vector&lt;Arg&gt; args_;  <span class="comment">///&lt; The underlying data container.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span>  };</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">  /// @param[in] connective  The logical connective for this Boolean formula.</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">  /// @param[in] args  The arguments of the formula.</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">  /// @param[in] min_number  The min number relevant to the connective.</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">  /// @param[in] max_number  The max number relevant to the connective.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">  /// @throws ValidityError  Invalid arguments or setup for the connective.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">  /// @throws LogicError  Invalid nesting of complement or constant args.</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">  /// @throws LogicError  Negative values for min or max number.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>(<a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72a">Connective</a> connective, <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">ArgSet</a> args,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;          std::optional&lt;int&gt; min_number = {},</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;          std::optional&lt;int&gt; max_number = {});</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">  /// Copy semantics only.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">  /// @returns The connective of this formula.</span></div><div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#a21af442c226b3d6cb9eddcf190583453">  311</a></span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72a">Connective</a> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a21af442c226b3d6cb9eddcf190583453">connective</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> connective_; }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">  /// @returns The min number for &quot;atleast&quot;/&quot;cardinality&quot; connective.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"></span>  std::optional&lt;int&gt; min_number() <span class="keyword">const</span>;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">  /// @returns The max number of &quot;cardinality&quot; connective.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"></span>  std::optional&lt;int&gt; max_number() <span class="keyword">const</span>;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">  /// @returns The arguments of this formula.</span></div><div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#ac850fff7d56305c9cf3a29c5381b502a">  320</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Arg&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#ac850fff7d56305c9cf3a29c5381b502a">args</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> args_.data(); }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">  /// Swaps an argument event with another one.</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">  /// @param[in] current  The current argument event in this formula.</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">  /// @param[in] other  The replacement argument event.</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">  /// @post Strong exception safety guarantees.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">  /// @post The complement flag is preserved.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">  /// @post The position is preserved.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">  /// @throws DuplicateArgumentError  The replacement argument is duplicate.</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">  /// @throws LogicError  The current argument does not belong to this formula.</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">  /// @throws LogicError  The replacement would result in invalid setup.</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Swap(<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> current, <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> other);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">  /// Validates the min and max numbers relevant to the connective.</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">  /// @param[in] min_number  The number to be used for connective min number.</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">  /// @param[in] max_number  The number to be used for connective max number.</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">  /// @throws LogicError  The min or max number is invalid or not applicable.</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ValidateMinMaxNumber(std::optional&lt;int&gt; min_number,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                            std::optional&lt;int&gt; max_number);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">  /// Checks if the formula argument results in invalid nesting.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">  /// @param[in] arg  The argument in the formula.</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">  /// @throws LogicError  Invalid nesting of complement or constant args.</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ValidateNesting(<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Arg</a>&amp; arg);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72a">Connective</a> connective_;  <span class="comment">///&lt; Logical connective.</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"></span>  std::uint16_t min_number_;  <span class="comment">///&lt; Min number for &quot;atleast&quot;/&quot;cardinality&quot;.</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"></span>  std::uint16_t max_number_;  <span class="comment">///&lt; Max number for &quot;cardinality&quot;.</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">ArgSet</a> args_;  <span class="comment">///&lt; All events.</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">/// Comparison of formula arguments.</span></div><div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="event_8h.xhtml#aad0304bd9341c5862adba6aedbd5eee7">  360</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="event_8h.xhtml#aad0304bd9341c5862adba6aedbd5eee7">operator==</a>(<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Formula::Arg</a>&amp; lhs,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                       <span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Formula::Arg</a>&amp; rhs) noexcept {</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  <span class="keywordflow">return</span> lhs.complement == rhs.complement &amp;&amp; lhs.event == rhs.event;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a043794bf6edfdbb259e3763a5a7e5076"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">scram::mef::Formula::ArgEvent</a></div><div class="ttdeci">std::variant&lt; Gate *, BasicEvent *, HouseEvent * &gt; ArgEvent</div><div class="ttdoc">Argument events of a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00229">event.h:229</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aafe69fbd83def53b2925412796fbeebd8"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aafe69fbd83def53b2925412796fbeebd8">scram::mef::kNull</a></div><div class="ttdoc">Single argument pass-through without logic. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00207">event.h:207</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with connectives and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00226">event.h:226</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_add1c73d7d5e7c20b08ec0eb814101aed"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">scram::mef::Formula::ArgSet::size</a></div><div class="ttdeci">std::size_t size() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00283">event.h:283</a></div></div>
<div class="ttc" id="event_8h_xhtml_a10fa62aee4792a7c79e82ced70cb9a48"><div class="ttname"><a href="event_8h.xhtml#a10fa62aee4792a7c79e82ced70cb9a48">scram::mef::EventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Event &gt; EventPtr</div><div class="ttdoc">Convenience aliases for smart pointers. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00151">event.h:151</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Formula_1_1Arg_xhtml_ac8705ed69dad1a5da55236db55268618"><div class="ttname"><a href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#ac8705ed69dad1a5da55236db55268618">scram::mef::Formula::Arg::event</a></div><div class="ttdeci">ArgEvent event</div><div class="ttdoc">The event in the formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00234">event.h:234</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml">scram::mef::Id</a></div><div class="ttdoc">Mixin class for assigning unique identifiers to elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00200">element.h:200</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_a2ae956d90c851c3e47c623f9915f7e39"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#a2ae956d90c851c3e47c623f9915f7e39">scram::mef::Gate::formula</a></div><div class="ttdeci">Formula &amp; formula()</div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00177">event.h:177</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa105c845b24300fba1a8019c8b67a8512"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa105c845b24300fba1a8019c8b67a8512">scram::mef::kAtleast</a></div><div class="ttdoc">Combination, K/N, atleast, or Vote gate representation. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00202">event.h:202</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aaa21649cb2e0bc2618074ae4b28968882"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaa21649cb2e0bc2618074ae4b28968882">scram::mef::kXor</a></div><div class="ttdoc">Exclusive OR gate with two inputs only. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00203">event.h:203</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Event_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Event.xhtml">scram::mef::Event</a></div><div class="ttdoc">Abstract base class for general fault tree events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00039">event.h:39</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915">scram::mef::kCardinality</a></div><div class="ttdoc">General quantifier of events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00212">event.h:212</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Formula_1_1Arg_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">scram::mef::Formula::Arg</a></div><div class="ttdoc">Formula argument with a complement flag. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00232">event.h:232</a></div></div>
<div class="ttc" id="event_8h_xhtml_a1effa4453264f58afa6b91ff3f2ff5fe"><div class="ttname"><a href="event_8h.xhtml#a1effa4453264f58afa6b91ff3f2ff5fe">scram::mef::kConnectiveToString</a></div><div class="ttdeci">const char *const kConnectiveToString[]</div><div class="ttdoc">String representations of the connectives. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00220">event.h:220</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_ab0516b885446046951fbfa665978a1ff"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#ab0516b885446046951fbfa665978a1ff">scram::mef::Formula::ArgSet::data</a></div><div class="ttdeci">std::vector&lt; Arg &gt; &amp; data()</div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00279">event.h:279</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00075">event.h:75</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_a91e64a6329fa4a535fd2cae3c5d4acf7"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#a91e64a6329fa4a535fd2cae3c5d4acf7">scram::mef::BasicEvent::p</a></div><div class="ttdeci">double p() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00104">event.h:104</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abde84a63a060e2424ab92431634f21d9"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">scram::mef::Gate::formula</a></div><div class="ttdeci">const Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00173">event.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_a85bff0fcd9b5965b8d3b5113e729ea2a"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a85bff0fcd9b5965b8d3b5113e729ea2a">scram::mef::Formula::ArgSet::Add</a></div><div class="ttdeci">void Add(Arg arg)</div><div class="ttdoc">Overload to add formula argument with a structure. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00267">event.h:267</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_a002eb5ab56488d42508bb7ed62012816"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a002eb5ab56488d42508bb7ed62012816">scram::mef::Formula::ArgSet::ArgSet</a></div><div class="ttdeci">ArgSet(std::initializer_list&lt; ArgEvent &gt; init_list)</div><div class="ttdoc">Constructors from initializer lists and iterator ranges of args. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00248">event.h:248</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml">scram::mef::HouseEvent</a></div><div class="ttdoc">Representation of a house event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00049">event.h:49</a></div></div>
<div class="ttc" id="event_8h_xhtml_aafcac049a08323d6a03dd663de6653a7"><div class="ttname"><a href="event_8h.xhtml#aafcac049a08323d6a03dd663de6653a7">scram::mef::kNumConnectives</a></div><div class="ttdeci">const int kNumConnectives</div><div class="ttdoc">The number of connectives in the enum. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00216">event.h:216</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_a1e4a926eb0379fdb33ee354f65348418"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a1e4a926eb0379fdb33ee354f65348418">scram::mef::Formula::ArgSet::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00286">event.h:286</a></div></div>
<div class="ttc" id="event_8h_xhtml_af2bc060f951b2dcb63fb313d3800f9f3"><div class="ttname"><a href="event_8h.xhtml#af2bc060f951b2dcb63fb313d3800f9f3">scram::mef::HouseEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; HouseEvent &gt; HouseEventPtr</div><div class="ttdoc">Convenience aliases for smart pointers. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00152">event.h:152</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_a15ab4daf36b62127703cf610bdc80183"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#a15ab4daf36b62127703cf610bdc80183">scram::mef::HouseEvent::state</a></div><div class="ttdeci">void state(bool constant)</div><div class="ttdoc">Sets the state for House event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00061">event.h:61</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Formula_1_1Arg_xhtml_a2b684ca33f857d6554b0f037b50bb5f8"><div class="ttname"><a href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#a2b684ca33f857d6554b0f037b50bb5f8">scram::mef::Formula::Arg::complement</a></div><div class="ttdeci">bool complement</div><div class="ttdoc">Negation of the argument event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00233">event.h:233</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa84dc77641f7e38d126a3cdde0c7ed687"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa84dc77641f7e38d126a3cdde0c7ed687">scram::mef::kNand</a></div><div class="ttdoc">Not AND. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00205">event.h:205</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_a52df198b6ee636ae5f6c19fcdc33ee7c"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a52df198b6ee636ae5f6c19fcdc33ee7c">scram::mef::Formula::ArgSet::ArgSet</a></div><div class="ttdeci">ArgSet(Iterator first1, Iterator last1)</div><div class="ttdoc">Constructors from initializer lists and iterator ranges of args. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00252">event.h:252</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00947">pdag.cc:947</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa3045c94576caafc0e66ba200a38754e3"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa3045c94576caafc0e66ba200a38754e3">scram::mef::kIff</a></div><div class="ttdoc">Equality with two inputs only. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00210">event.h:210</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa28ae6864fb9d0133c1b092fa57833a16"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa28ae6864fb9d0133c1b092fa57833a16">scram::mef::kNor</a></div><div class="ttdoc">Not OR. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00206">event.h:206</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_aae8674c47f234e5d98dfcfa1b6cf69c1"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#aae8674c47f234e5d98dfcfa1b6cf69c1">scram::mef::Id::Id</a></div><div class="ttdeci">Id(std::string name, std::string base_path=&quot;&quot;, RoleSpecifier role=RoleSpecifier::kPublic)</div><div class="ttdoc">Constructs an element with an original name. </div><div class="ttdef"><b>Definition:</b> <a href="element_8cc_source.xhtml#l00097">element.cc:97</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72a"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72a">scram::mef::Connective</a></div><div class="ttdeci">Connective</div><div class="ttdoc">Logical connectives for formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00199">event.h:199</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_aa03b0431033c36f868ee9eae956bd873"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#aa03b0431033c36f868ee9eae956bd873">scram::mef::BasicEvent::expression</a></div><div class="ttdeci">Expression &amp; expression() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00093">event.h:93</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Event_xhtml_a966f53c51a08bdde26c131c7b8474b7f"><div class="ttname"><a href="classscram_1_1mef_1_1Event.xhtml#a966f53c51a08bdde26c131c7b8474b7f">scram::mef::Event::~Event</a></div><div class="ttdeci">virtual ~Event()=0</div><div class="ttdoc">Abstract class. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">scram::mef::Formula::ArgSet</a></div><div class="ttdoc">The set of formula arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00238">event.h:238</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_a2e6fa7bd71621b27383fd095e291dcfd"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#a2e6fa7bd71621b27383fd095e291dcfd">scram::mef::BasicEvent::ccf_gate</a></div><div class="ttdeci">void ccf_gate(std::unique_ptr&lt; Gate &gt; gate)</div><div class="ttdoc">Sets the common cause failure group gate that can represent this basic event in analysis with common ...</div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00134">event.h:134</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_ac850fff7d56305c9cf3a29c5381b502a"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#ac850fff7d56305c9cf3a29c5381b502a">scram::mef::Formula::args</a></div><div class="ttdeci">const std::vector&lt; Arg &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00320">event.h:320</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a21af442c226b3d6cb9eddcf190583453"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a21af442c226b3d6cb9eddcf190583453">scram::mef::Formula::connective</a></div><div class="ttdeci">Connective connective() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00311">event.h:311</a></div></div>
<div class="ttc" id="event_8h_xhtml_aad0304bd9341c5862adba6aedbd5eee7"><div class="ttname"><a href="event_8h.xhtml#aad0304bd9341c5862adba6aedbd5eee7">scram::mef::operator==</a></div><div class="ttdeci">bool operator==(const Formula::Arg &amp;lhs, const Formula::Arg &amp;rhs) noexcept</div><div class="ttdoc">Comparison of formula arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00360">event.h:360</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_a4f4a16265e26205981d67d25d16f21d6"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#a4f4a16265e26205981d67d25d16f21d6">scram::mef::HouseEvent::state</a></div><div class="ttdeci">bool state() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00064">event.h:64</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_ab6b4e5fd2ce8a81ae887902be30c2b29"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#ab6b4e5fd2ce8a81ae887902be30c2b29">scram::mef::BasicEvent::HasExpression</a></div><div class="ttdeci">bool HasExpression() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00082">event.h:82</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_a75eb81f1f94d00ae9ccbcc6459e577a7"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#a75eb81f1f94d00ae9ccbcc6459e577a7">scram::mef::BasicEvent::ccf_gate</a></div><div class="ttdeci">const Gate &amp; ccf_gate() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00122">event.h:122</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_a9ad3e3e7a9af34ee371ef8d25e6bdeea"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#a9ad3e3e7a9af34ee371ef8d25e6bdeea">scram::mef::Gate::HasFormula</a></div><div class="ttdeci">bool HasFormula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00166">event.h:166</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_ab9764640b00bcc3f7241c5bf185d8f2a"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#ab9764640b00bcc3f7241c5bf185d8f2a">scram::mef::BasicEvent::expression</a></div><div class="ttdeci">void expression(Expression *expression)</div><div class="ttdoc">Sets the expression of this basic event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00088">event.h:88</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_a39cb01e8c82942942da00d6537deeb72"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">scram::mef::HouseEvent::kFalse</a></div><div class="ttdeci">static HouseEvent kFalse</div><div class="ttdoc">Literal False event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00052">event.h:52</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7cdc73646f3e8e6c275b892bc7e615fb"><div class="ttname"><a href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a></div><div class="ttdeci">std::string end</div><div class="ttdoc">The end of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00949">pdag.cc:949</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00161">event.h:161</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml">scram::mef::Usage</a></div><div class="ttdoc">Mixin class for providing usage marks for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00305">element.h:305</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_add3768ebd5e4f11c0032f8dcfdf0486e"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">scram::mef::HouseEvent::kTrue</a></div><div class="ttdeci">static HouseEvent kTrue</div><div class="ttdoc">Literal True event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00051">event.h:51</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_a9e35c2fdad19fe30bc9e1ba4ccc8ed93"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a9e35c2fdad19fe30bc9e1ba4ccc8ed93">scram::mef::Formula::ArgSet::data</a></div><div class="ttdeci">const std::vector&lt; Arg &gt; &amp; data() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00278">event.h:278</a></div></div>
<div class="ttc" id="event_8h_xhtml_a87cdc93e494b5e957991657303a2e30b"><div class="ttname"><a href="event_8h.xhtml#a87cdc93e494b5e957991657303a2e30b">scram::mef::GatePtr</a></div><div class="ttdeci">std::unique_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Convenience aliases for smart pointers. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00154">event.h:154</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression.xhtml">scram::mef::NaryExpression</a></div><div class="ttdoc">n-ary expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00163">expression.h:163</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa608ded5201a2888fd2d214af4fc582d1"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa608ded5201a2888fd2d214af4fc582d1">scram::mef::kImply</a></div><div class="ttdoc">Implication with two inputs only. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00211">event.h:211</a></div></div>
<div class="ttc" id="event_8h_xhtml_a77a3414d54d1ed73527bc929354d0508"><div class="ttname"><a href="event_8h.xhtml#a77a3414d54d1ed73527bc929354d0508">scram::mef::BasicEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; BasicEvent &gt; BasicEventPtr</div><div class="ttdoc">Convenience aliases for smart pointers. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00153">event.h:153</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aaabe07e269099a3d699ca88f86bab1cc1"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaabe07e269099a3d699ca88f86bab1cc1">scram::mef::kNot</a></div><div class="ttdoc">Boolean negation. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00204">event.h:204</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_a8799642be619b6d634f385bf6599ed89"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#a8799642be619b6d634f385bf6599ed89">scram::mef::Gate::formula</a></div><div class="ttdeci">FormulaPtr formula(FormulaPtr formula)</div><div class="ttdoc">Sets the formula of this gate. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00187">event.h:187</a></div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_ae027e3ac6b3cf4839983dc2616ce0572"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#ae027e3ac6b3cf4839983dc2616ce0572">scram::mef::BasicEvent::HasCcf</a></div><div class="ttdeci">bool HasCcf() const </div><div class="ttdoc">Indicates if this basic event has been set to be in a CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00119">event.h:119</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00158">event.h:158</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_a11af51fec2f46e08cf005cd5e6013dec"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a11af51fec2f46e08cf005cd5e6013dec">scram::mef::Formula::ArgSet::ArgSet</a></div><div class="ttdeci">ArgSet(std::initializer_list&lt; Arg &gt; init_list)</div><div class="ttdoc">Constructors from initializer lists and iterator ranges of args. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00245">event.h:245</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml">scram::mef::NodeMark</a></div><div class="ttdoc">Mixin class for providing marks for graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00280">element.h:280</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Feb 2 2018 21:03:09 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
