<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>combination.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aff658140b5e7b3b627b7275c534a858.xhtml">ext</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">combination.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="combination_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//  (C) Copyright Howard Hinnant 2005-2011.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  Use, modification and distribution are subject to the Boost Software</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//  http://www.boost.org/LICENSE_1_0.txt).</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">/// n-choose-k combination generation facilities from</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">/// http://howardhinnant.github.io/combinations.html</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceext.xhtml">ext</a> {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">namespace </span>detail {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">// Rotates two discontinuous ranges to put *first2 where *first1 is.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">//     If last1 == first2,</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">//     this would be equivalent to rotate(first1, first2, last2),</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">//     but instead the rotate &quot;jumps&quot; over the discontinuity [last1, first2) -</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">//     which need not be a valid range.</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">//     In order to make it faster,</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">//     the length of [first1, last1) is passed in as d1,</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">//     and d2 must be the length of [first2, last2).</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">//  In a perfect world, the d1 &gt; d2 case would have used</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">//     swap_ranges and reverse_iterator,</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">//     but reverse_iterator is too inefficient.</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> B<span class="keywordtype">id</span>irIter&gt;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keywordtype">void</span> rotate_discontinuous(</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    BidirIter first1, BidirIter last1,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">typename</span> std::iterator_traits&lt;BidirIter&gt;::difference_type d1,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    BidirIter first2, BidirIter last2,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">typename</span> std::iterator_traits&lt;BidirIter&gt;::difference_type d2) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">using</span> std::swap;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keywordflow">if</span> (d1 &lt;= d2) {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    std::rotate(first2, std::swap_ranges(first1, last1, first2), last2);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    BidirIter i1 = last1;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">while</span> (first2 != last2)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      swap(*--i1, *--last2);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    std::rotate(first1, i1, last1);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">// Call f() for each combination of the elements</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">//    [first1, last1) + [first2, last2)</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">//    swapped/rotated into the range [first1, last1).</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">//    As long as f() returns false,</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">//    continue for every combination,</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">//    and then return [first1, last1) and [first2, last2)</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">//    to their original state.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">//    If f() returns true, return immediately.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">//  Does the absolute minimum amount of swapping to accomplish its task.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">//  If f() always returns false, it will be called (d1+d2)!/(d1!*d2!) times.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> B<span class="keywordtype">id</span>irIter, <span class="keyword">class</span> Function&gt;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keywordtype">bool</span> combine_discontinuous(</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    BidirIter first1, BidirIter last1,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">typename</span> std::iterator_traits&lt;BidirIter&gt;::difference_type d1,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    BidirIter first2, BidirIter last2,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">typename</span> std::iterator_traits&lt;BidirIter&gt;::difference_type d2,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    Function&amp; f,  <span class="comment">// NOLINT</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">typename</span> std::iterator_traits&lt;BidirIter&gt;::difference_type d = 0) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keyword">typedef</span> <span class="keyword">typename</span> std::iterator_traits&lt;BidirIter&gt;::difference_type D;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keyword">using</span> std::swap;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keywordflow">if</span> (d1 == 0 || d2 == 0)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> f();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keywordflow">if</span> (d1 == 1) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">for</span> (BidirIter i2 = first2; i2 != last2; ++i2) {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      <span class="keywordflow">if</span> (f())</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      swap(*first1, *i2);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    BidirIter f1p = std::next(first1);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    BidirIter i2 = first2;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">for</span> (D d22 = d2; i2 != last2; ++i2, --d22) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      <span class="keywordflow">if</span> (combine_discontinuous(f1p, last1, d1 - 1, i2, last2, d22, f, d + 1))</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      swap(*first1, *i2);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">if</span> (f())</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keywordflow">if</span> (d != 0) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    rotate_discontinuous(first1, last1, d1, std::next(first2), last2, d2 - 1);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    rotate_discontinuous(first1, last1, d1, first2, last2, d2);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">// Creates a functor with no arguments which calls f_(first_, last_).</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">//   Also has a variant that takes two It and ignores them.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Function, <span class="keyword">class</span> It&gt;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword">class </span>bound_range {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  Function f_;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  It first_;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  It last_;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  bound_range(Function f, It first, It last)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      : f_(f), first_(first), last_(last) {}</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordtype">bool</span> operator()() { <span class="keywordflow">return</span> f_(first_, last_); }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordtype">bool</span> operator()(It, It) { <span class="keywordflow">return</span> f_(first_, last_); }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;};</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}  <span class="comment">// namespace detail</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#endif  // DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">/// Repeatedly permutes the range [first, last) such that</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">/// the range [first, mid) represents each combination of the values</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">/// in [first, last) taken distance(first, mid) at a time.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">/// For each permutation calls f(first, mid).</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">/// On each call, the range [mid, last) holds the values not in the</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">/// current permutation. If f returns true then returns immediately without</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">/// permuting the sequence any further.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">/// Otherwise, after the last call to f, and prior to returning,</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">/// the range [first, last) is restored to its original order.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">/// @param[in] first  The start of the range.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">/// @param[in] mid  The end of the combination.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">/// @param[in] last  The sentinel end of the range.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">/// @param[in] f  The function to be called per combination.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">/// @returns f.</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">/// @pre The type of *first shall satisfy the requirements of Swappable,</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">///      MoveConstructible and the requirements of MoveAssignable.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">///      [first, mid) and [mid, last) are valid ranges.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">///      Function shall meet the requirements of</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">///      MoveConstructible and MoveAssignable.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">///      f is callable as f(first, mid)</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">///      and returns a type contextually convertible to bool.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">/// @note If f always returns false,</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">///       it is called count_each_combination(first, mid, last) times.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">/// @note The type referenced by *first</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">///       need not be EqualityComparable nor LessThanComparable.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">///       The input range need not be sorted.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">///       The algorithm does not take the values in the range [first, last)</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">///       into account in any way.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> B<span class="keywordtype">id</span>irIter, <span class="keyword">class</span> Function&gt;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="combination_8h.xhtml#aebc3a0666d4c129b0646a18acb458c03">  152</a></span>&#160;Function <a class="code" href="combination_8h.xhtml#aebc3a0666d4c129b0646a18acb458c03">for_each_combination</a>(BidirIter first, BidirIter mid, BidirIter last,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                              Function f) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  detail::bound_range&lt;Function&amp;, BidirIter&gt; wfunc(f, first, mid);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  detail::combine_discontinuous(first, mid, std::distance(first, mid), mid,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                last, std::distance(mid, last), wfunc);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keywordflow">return</span> f;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}  <span class="comment">// namespace ext</span></div><div class="ttc" id="namespaceext_xhtml"><div class="ttname"><a href="namespaceext.xhtml">ext</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.xhtml#l00027">algorithm.h:27</a></div></div>
<div class="ttc" id="combination_8h_xhtml_aebc3a0666d4c129b0646a18acb458c03"><div class="ttname"><a href="combination_8h.xhtml#aebc3a0666d4c129b0646a18acb458c03">ext::for_each_combination</a></div><div class="ttdeci">Function for_each_combination(BidirIter first, BidirIter mid, BidirIter last, Function f)</div><div class="ttdoc">Repeatedly permutes the range [first, last) such that the range [first, mid) represents each combinat...</div><div class="ttdef"><b>Definition:</b> <a href="combination_8h_source.xhtml#l00152">combination.h:152</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Feb 2 2018 21:03:08 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
