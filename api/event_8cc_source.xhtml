<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>event.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">event.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="event_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of Event Class and its derived classes.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="algorithm_8h.xhtml">ext/algorithm.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="variant_8h.xhtml">ext/variant.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<a class="code" href="classscram_1_1mef_1_1Event.xhtml#a966f53c51a08bdde26c131c7b8474b7f">Event::~Event</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;HouseEvent <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">HouseEvent::kTrue</a> = []() {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  HouseEvent house_event(<span class="stringliteral">&quot;__true__&quot;</span>);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  house_event.state(<span class="keyword">true</span>);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordflow">return</span> house_event;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;HouseEvent <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">HouseEvent::kFalse</a>(<span class="stringliteral">&quot;__false__&quot;</span>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BasicEvent.xhtml#acfc0e73e1add67aa2ace841350eb62cd">   42</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#acfc0e73e1add67aa2ace841350eb62cd">BasicEvent::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  assert(expression_ &amp;&amp; <span class="stringliteral">&quot;The basic event&#39;s expression is not set.&quot;</span>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <a class="code" href="expression_8cc.xhtml#a2c0a639b694ccfdf4b7d6913d8a635de">EnsureProbability</a>(expression_, <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Event::name</a>());</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#adef52f323d9a5b26ceaa951d5b304bb7">   47</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#adef52f323d9a5b26ceaa951d5b304bb7">Formula::ArgSet::Add</a>(<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> event, <span class="keywordtype">bool</span> complement) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Event.xhtml">Event</a>* base = ext::as&lt;Event*&gt;(event);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordflow">if</span> (ext::any_of(args_, [&amp;base](<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Arg</a>&amp; arg) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">return</span> ext::as&lt;Event*&gt;(arg.<a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#ac8705ed69dad1a5da55236db55268618">event</a>)-&gt;<span class="keywordtype">id</span>() == base-&gt;<a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      })) {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>(<span class="stringliteral">&quot;Duplicate argument &quot;</span> + base-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>()));</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  args_.push_back({complement, <span class="keyword">event</span>});</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordflow">if</span> (!base-&gt;<a class="code" href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">usage</a>())</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    base-&gt;<a class="code" href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">usage</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a1b01a6b296eec85e3d7a5328585ffdf5">   59</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a1b01a6b296eec85e3d7a5328585ffdf5">Formula::ArgSet::Remove</a>(<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> event) {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keyword">auto</span> it = boost::find_if(</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      args_, [&amp;event](<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Arg</a>&amp; arg) { <span class="keywordflow">return</span> arg.<a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#ac8705ed69dad1a5da55236db55268618">event</a> == event; });</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordflow">if</span> (it == args_.end())</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;The event is not in the argument set.&quot;</span>));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  args_.erase(it);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#ae5205378d3ed6aec0541327535c560bb">   67</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#ae5205378d3ed6aec0541327535c560bb">Formula::Formula</a>(<a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72a">Connective</a> connective, <a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">ArgSet</a> args,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                 std::optional&lt;int&gt; min_number, std::optional&lt;int&gt; max_number)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    : connective_(connective),</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      min_number_(min_number.value_or(0)),</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      max_number_(max_number.value_or(0)),</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      args_(std::move(args)) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  ValidateMinMaxNumber(min_number, max_number);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordflow">switch</span> (connective_) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa84dc77641f7e38d126a3cdde0c7ed687">kNand</a>:</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa28ae6864fb9d0133c1b092fa57833a16">kNor</a>:</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      <span class="keywordflow">if</span> (args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">size</a>() &lt; 2)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;\&quot;&quot;</span> + std::string(<a class="code" href="event_8h.xhtml#a1effa4453264f58afa6b91ff3f2ff5fe">kConnectiveToString</a>[connective_]) +</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                          <span class="stringliteral">&quot;\&quot; connective must have 2 or more arguments.&quot;</span>));</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaabe07e269099a3d699ca88f86bab1cc1">kNot</a>:</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aafe69fbd83def53b2925412796fbeebd8">kNull</a>:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <span class="keywordflow">if</span> (args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">size</a>() != 1)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;\&quot;&quot;</span> + std::string(<a class="code" href="event_8h.xhtml#a1effa4453264f58afa6b91ff3f2ff5fe">kConnectiveToString</a>[connective_]) +</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                          <span class="stringliteral">&quot;\&quot; connective must have only one argument.&quot;</span>));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaa21649cb2e0bc2618074ae4b28968882">kXor</a>:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa3045c94576caafc0e66ba200a38754e3">kIff</a>:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa608ded5201a2888fd2d214af4fc582d1">kImply</a>:</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <span class="keywordflow">if</span> (args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">size</a>() != 2)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;\&quot;&quot;</span> + std::string(<a class="code" href="event_8h.xhtml#a1effa4453264f58afa6b91ff3f2ff5fe">kConnectiveToString</a>[connective_]) +</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                          <span class="stringliteral">&quot;\&quot; connective must have exactly 2 arguments.&quot;</span>));</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa105c845b24300fba1a8019c8b67a8512">kAtleast</a>:</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      <span class="keywordflow">if</span> (!min_number)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="stringliteral">&quot;&#39;atleast&#39; connective requires min number for its args.&quot;</span>));</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      <span class="keywordflow">if</span> (min_number_ &lt; 2)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Min number cannot be less than 2.&quot;</span>));</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      <span class="keywordflow">if</span> (args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">size</a>() &lt;= min_number_) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;&#39;atleast&#39; connective must have more arguments &quot;</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                          <span class="stringliteral">&quot;than its min number &quot;</span> +</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                          std::to_string(min_number_) + <span class="stringliteral">&quot;.&quot;</span>));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915">kCardinality</a>:</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      <span class="keywordflow">if</span> (!min_number || !max_number)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="stringliteral">&quot;&#39;cardinality&#39; connective requires min and max number for args.&quot;</span>));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="keywordflow">if</span> (min_number_ &gt; max_number_)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;\&quot;cardinality\&quot; connective min number (&quot;</span> +</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                  std::to_string(min_number_) +</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                  <span class="stringliteral">&quot;) cannot be greater than max number (&quot;</span> +</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                  std::to_string(max_number_) + <span class="stringliteral">&quot;).&quot;</span>));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <span class="keywordflow">if</span> (args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a1e4a926eb0379fdb33ee354f65348418">empty</a>())</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="stringliteral">&quot;\&quot;cardinality\&quot; connective requires one or more arguments.&quot;</span>));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="keywordflow">if</span> (args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">size</a>() &lt; max_number_)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;\&quot;cardinality\&quot; connective max number (&quot;</span> +</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                          std::to_string(max_number_) +</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                          <span class="stringliteral">&quot;) cannot be greater than the number of arguments (&quot;</span> +</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                          std::to_string(args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">size</a>()) + <span class="stringliteral">&quot;)&quot;</span>));</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Arg</a>&amp; arg : args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a9e35c2fdad19fe30bc9e1ba4ccc8ed93">data</a>())</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    ValidateNesting(arg);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#a7a1e721a74179b966543929fcaabd6af">  141</a></span>&#160;std::optional&lt;int&gt; <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a7a1e721a74179b966543929fcaabd6af">Formula::min_number</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordflow">if</span> (connective_ == <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa105c845b24300fba1a8019c8b67a8512">kAtleast</a> || connective_ == <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915">kCardinality</a>)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">return</span> min_number_;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#a306266e72a52153d168abdce3d039368">  147</a></span>&#160;std::optional&lt;int&gt; <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a306266e72a52153d168abdce3d039368">Formula::max_number</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keywordflow">if</span> (connective_ == <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915">kCardinality</a>)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> max_number_;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#a6a6ea9595613f23e0f19af5f96754683">  153</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a6a6ea9595613f23e0f19af5f96754683">Formula::Swap</a>(<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> current, <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a> other) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keyword">auto</span> it = boost::find_if(args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a9e35c2fdad19fe30bc9e1ba4ccc8ed93">data</a>(), [&amp;current](<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Arg</a>&amp; arg) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> arg.event == current;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  });</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keywordflow">if</span> (it == args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a9e35c2fdad19fe30bc9e1ba4ccc8ed93">data</a>().end())</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;The current event is not in the formula.&quot;</span>));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Event.xhtml">Event</a>* base = ext::as&lt;Event*&gt;(other);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordflow">if</span> (ext::any_of(args_.<a class="code" href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a9e35c2fdad19fe30bc9e1ba4ccc8ed93">data</a>(), [&amp;current, &amp;base](<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Arg</a>&amp; arg) {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">return</span> arg.event != current &amp;&amp;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;               ext::as&lt;Event*&gt;(arg.event)-&gt;<span class="keywordtype">id</span>() == base-&gt;<a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      })) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>(<span class="stringliteral">&quot;Duplicate argument &quot;</span> + base-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>()));</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  ValidateNesting({it-&gt;complement, other});</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keywordflow">if</span> (!base-&gt;<a class="code" href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">usage</a>())</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    base-&gt;<a class="code" href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">usage</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  it-&gt;event.swap(other);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keywordtype">void</span> Formula::ValidateMinMaxNumber(std::optional&lt;int&gt; <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a7a1e721a74179b966543929fcaabd6af">min_number</a>,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                   std::optional&lt;int&gt; <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a306266e72a52153d168abdce3d039368">max_number</a>) {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  assert(!min_number ||</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;         std::numeric_limits&lt;decltype(min_number_)&gt;::max() &gt;= *min_number);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  assert(!max_number ||</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;         std::numeric_limits&lt;decltype(max_number_)&gt;::max() &gt;= *max_number);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordflow">if</span> (min_number) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">if</span> (*min_number &lt; 0)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;The min number cannot be negative.&quot;</span>));</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">if</span> (connective_ != <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa105c845b24300fba1a8019c8b67a8512">kAtleast</a> &amp;&amp; connective_ != <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915">kCardinality</a>) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;          <span class="stringliteral">&quot;The min number can only be defined for &#39;atleast&#39; &quot;</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;          <span class="stringliteral">&quot;or &#39;cardinality&#39; connective. The connective of this formula is &#39;&quot;</span> +</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;          std::string(<a class="code" href="event_8h.xhtml#a1effa4453264f58afa6b91ff3f2ff5fe">kConnectiveToString</a>[connective_]) + <span class="stringliteral">&quot;&#39;.&quot;</span>));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keywordflow">if</span> (max_number) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">if</span> (*max_number &lt; 0)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;The max number cannot be negative.&quot;</span>));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">if</span> (connective_ != <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915">kCardinality</a>) {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;          <span class="stringliteral">&quot;The max number can only be defined for &#39;cardinality&#39; connective. &quot;</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;          <span class="stringliteral">&quot;The connective of this formula is &#39;&quot;</span> +</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;          std::string(<a class="code" href="event_8h.xhtml#a1effa4453264f58afa6b91ff3f2ff5fe">kConnectiveToString</a>[connective_]) + <span class="stringliteral">&quot;&#39;.&quot;</span>));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keywordtype">void</span> Formula::ValidateNesting(<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Arg</a>&amp; arg) {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <span class="keywordflow">if</span> (arg.<a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#a2b684ca33f857d6554b0f037b50bb5f8">complement</a>) {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">if</span> (connective_ == <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aafe69fbd83def53b2925412796fbeebd8">kNull</a> || connective_ == <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaabe07e269099a3d699ca88f86bab1cc1">kNot</a>)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;Invalid nesting of a complement arg.&quot;</span>));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="keywordflow">if</span> (connective_ == <a class="code" href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaabe07e269099a3d699ca88f86bab1cc1">kNot</a>) {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">if</span> (arg.<a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#ac8705ed69dad1a5da55236db55268618">event</a> == <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a>(&amp;HouseEvent::kTrue) ||</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        arg.<a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#ac8705ed69dad1a5da55236db55268618">event</a> == <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">ArgEvent</a>(&amp;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">HouseEvent::kFalse</a>)) {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;Invalid nesting of a constant arg.&quot;</span>));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a043794bf6edfdbb259e3763a5a7e5076"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a043794bf6edfdbb259e3763a5a7e5076">scram::mef::Formula::ArgEvent</a></div><div class="ttdeci">std::variant&lt; Gate *, BasicEvent *, HouseEvent * &gt; ArgEvent</div><div class="ttdoc">Argument events of a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00229">event.h:229</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aafe69fbd83def53b2925412796fbeebd8"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aafe69fbd83def53b2925412796fbeebd8">scram::mef::kNull</a></div><div class="ttdoc">Single argument pass-through without logic. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00207">event.h:207</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_add1c73d7d5e7c20b08ec0eb814101aed"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#add1c73d7d5e7c20b08ec0eb814101aed">scram::mef::Formula::ArgSet::size</a></div><div class="ttdeci">std::size_t size() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00283">event.h:283</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a306266e72a52153d168abdce3d039368"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a306266e72a52153d168abdce3d039368">scram::mef::Formula::max_number</a></div><div class="ttdeci">std::optional&lt; int &gt; max_number() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00147">event.cc:147</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_a7e258c5f6332715d5ed6a3fdbf681a8b"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">scram::mef::Id::id</a></div><div class="ttdeci">const std::string &amp; id() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00212">element.h:212</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Formula_1_1Arg_xhtml_ac8705ed69dad1a5da55236db55268618"><div class="ttname"><a href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#ac8705ed69dad1a5da55236db55268618">scram::mef::Formula::Arg::event</a></div><div class="ttdeci">ArgEvent event</div><div class="ttdoc">The event in the formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00234">event.h:234</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_adef52f323d9a5b26ceaa951d5b304bb7"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#adef52f323d9a5b26ceaa951d5b304bb7">scram::mef::Formula::ArgSet::Add</a></div><div class="ttdeci">void Add(ArgEvent event, bool complement=false)</div><div class="ttdoc">Adds an event into the arguments set. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00047">event.cc:47</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa105c845b24300fba1a8019c8b67a8512"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa105c845b24300fba1a8019c8b67a8512">scram::mef::kAtleast</a></div><div class="ttdoc">Combination, K/N, atleast, or Vote gate representation. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00202">event.h:202</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aaa21649cb2e0bc2618074ae4b28968882"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaa21649cb2e0bc2618074ae4b28968882">scram::mef::kXor</a></div><div class="ttdoc">Exclusive OR gate with two inputs only. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00203">event.h:203</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Event_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Event.xhtml">scram::mef::Event</a></div><div class="ttdoc">Abstract base class for general fault tree events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00039">event.h:39</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa4d1df616ab8b7d8baf45881282fbc915">scram::mef::kCardinality</a></div><div class="ttdoc">General quantifier of events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00212">event.h:212</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Formula_1_1Arg_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">scram::mef::Formula::Arg</a></div><div class="ttdoc">Formula argument with a complement flag. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00232">event.h:232</a></div></div>
<div class="ttc" id="event_8h_xhtml_a1effa4453264f58afa6b91ff3f2ff5fe"><div class="ttname"><a href="event_8h.xhtml#a1effa4453264f58afa6b91ff3f2ff5fe">scram::mef::kConnectiveToString</a></div><div class="ttdeci">const char *const kConnectiveToString[]</div><div class="ttdoc">String representations of the connectives. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00220">event.h:220</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_a2c0a639b694ccfdf4b7d6913d8a635de"><div class="ttname"><a href="expression_8cc.xhtml#a2c0a639b694ccfdf4b7d6913d8a635de">scram::mef::EnsureProbability</a></div><div class="ttdeci">void EnsureProbability(Expression *expression, const std::string &amp;description, const char *type)</div><div class="ttdoc">Ensures that expression can be used for probability ([0, 1]). </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00062">expression.cc:62</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_a1b01a6b296eec85e3d7a5328585ffdf5"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a1b01a6b296eec85e3d7a5328585ffdf5">scram::mef::Formula::ArgSet::Remove</a></div><div class="ttdeci">void Remove(ArgEvent event)</div><div class="ttdoc">Removes an event from the formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00059">event.cc:59</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_a1e4a926eb0379fdb33ee354f65348418"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a1e4a926eb0379fdb33ee354f65348418">scram::mef::Formula::ArgSet::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00286">event.h:286</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml_ae2ee222f7ce6cd4660567ce97d551222"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">scram::mef::Usage::usage</a></div><div class="ttdeci">bool usage() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00308">element.h:308</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Formula_1_1Arg_xhtml_a2b684ca33f857d6554b0f037b50bb5f8"><div class="ttname"><a href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml#a2b684ca33f857d6554b0f037b50bb5f8">scram::mef::Formula::Arg::complement</a></div><div class="ttdeci">bool complement</div><div class="ttdoc">Negation of the argument event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00233">event.h:233</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa84dc77641f7e38d126a3cdde0c7ed687"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa84dc77641f7e38d126a3cdde0c7ed687">scram::mef::kNand</a></div><div class="ttdoc">Not AND. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00205">event.h:205</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa3045c94576caafc0e66ba200a38754e3"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa3045c94576caafc0e66ba200a38754e3">scram::mef::kIff</a></div><div class="ttdoc">Equality with two inputs only. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00210">event.h:210</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa28ae6864fb9d0133c1b092fa57833a16"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa28ae6864fb9d0133c1b092fa57833a16">scram::mef::kNor</a></div><div class="ttdoc">Not OR. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00206">event.h:206</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72a"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72a">scram::mef::Connective</a></div><div class="ttdeci">Connective</div><div class="ttdoc">Logical connectives for formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00199">event.h:199</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Event_xhtml_a966f53c51a08bdde26c131c7b8474b7f"><div class="ttname"><a href="classscram_1_1mef_1_1Event.xhtml#a966f53c51a08bdde26c131c7b8474b7f">scram::mef::Event::~Event</a></div><div class="ttdeci">virtual ~Event()=0</div><div class="ttdoc">Abstract class. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml">scram::mef::Formula::ArgSet</a></div><div class="ttdoc">The set of formula arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00238">event.h:238</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="algorithm_8h_xhtml"><div class="ttname"><a href="algorithm_8h.xhtml">algorithm.h</a></div><div class="ttdoc">Helpful algorithm facilities as an extension to the STL or Boost. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_a39cb01e8c82942942da00d6537deeb72"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">scram::mef::HouseEvent::kFalse</a></div><div class="ttdeci">static HouseEvent kFalse</div><div class="ttdoc">Literal False event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00052">event.h:52</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a7a1e721a74179b966543929fcaabd6af"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a7a1e721a74179b966543929fcaabd6af">scram::mef::Formula::min_number</a></div><div class="ttdeci">std::optional&lt; int &gt; min_number() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00141">event.cc:141</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_add3768ebd5e4f11c0032f8dcfdf0486e"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">scram::mef::HouseEvent::kTrue</a></div><div class="ttdeci">static HouseEvent kTrue</div><div class="ttdoc">Literal True event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00051">event.h:51</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_1_1ArgSet_xhtml_a9e35c2fdad19fe30bc9e1ba4ccc8ed93"><div class="ttname"><a href="classscram_1_1mef_1_1Formula_1_1ArgSet.xhtml#a9e35c2fdad19fe30bc9e1ba4ccc8ed93">scram::mef::Formula::ArgSet::data</a></div><div class="ttdeci">const std::vector&lt; Arg &gt; &amp; data() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00278">event.h:278</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aa608ded5201a2888fd2d214af4fc582d1"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aa608ded5201a2888fd2d214af4fc582d1">scram::mef::kImply</a></div><div class="ttdoc">Implication with two inputs only. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00211">event.h:211</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00060">element.h:60</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_ae5205378d3ed6aec0541327535c560bb"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#ae5205378d3ed6aec0541327535c560bb">scram::mef::Formula::Formula</a></div><div class="ttdeci">Formula(Connective connective, ArgSet args, std::optional&lt; int &gt; min_number={}, std::optional&lt; int &gt; max_number={})</div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00067">event.cc:67</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_acfc0e73e1add67aa2ace841350eb62cd"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#acfc0e73e1add67aa2ace841350eb62cd">scram::mef::BasicEvent::Validate</a></div><div class="ttdeci">void Validate() const </div><div class="ttdoc">Validates the probability expressions for the primary event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00042">event.cc:42</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a6a6ea9595613f23e0f19af5f96754683"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a6a6ea9595613f23e0f19af5f96754683">scram::mef::Formula::Swap</a></div><div class="ttdeci">void Swap(ArgEvent current, ArgEvent other)</div><div class="ttdoc">Swaps an argument event with another one. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00153">event.cc:153</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1DuplicateArgumentError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">scram::mef::DuplicateArgumentError</a></div><div class="ttdoc">This error indicates that arguments must be unique. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00109">error.h:109</a></div></div>
<div class="ttc" id="structscram_1_1LogicError_xhtml"><div class="ttname"><a href="structscram_1_1LogicError.xhtml">scram::LogicError</a></div><div class="ttdoc">Signals internal logic errors, for example, pre-condition failure or use of functionality in ways not...</div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00078">error.h:78</a></div></div>
<div class="ttc" id="event_8h_xhtml_a25e9964a95ef342a8f8e8148d3f5f72aaabe07e269099a3d699ca88f86bab1cc1"><div class="ttname"><a href="event_8h.xhtml#a25e9964a95ef342a8f8e8148d3f5f72aaabe07e269099a3d699ca88f86bab1cc1">scram::mef::kNot</a></div><div class="ttdoc">Boolean negation. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00204">event.h:204</a></div></div>
<div class="ttc" id="variant_8h_xhtml"><div class="ttname"><a href="variant_8h.xhtml">variant.h</a></div><div class="ttdoc">Extra helper functions for std::variant. </div></div>
<div class="ttc" id="structscram_1_1mef_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1ValidityError.xhtml">scram::mef::ValidityError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00099">error.h:99</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Feb 2 2018 21:03:09 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
